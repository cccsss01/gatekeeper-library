"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[266],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var s=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,l=function(e,t){if(null==e)return{};var n,s,l={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=s.createContext({}),d=function(e){var t=s.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return s.createElement(o.Provider,{value:t},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(n),m=l,u=p["".concat(o,".").concat(m)]||p[m]||y[m]||a;return n?s.createElement(u,r(r({ref:t},c),{},{components:n})):s.createElement(u,r({ref:t},c))}));function u(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,r=new Array(a);r[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[p]="string"==typeof e?e:l,r[1]=i;for(var d=2;d<a;d++)r[d]=n[d];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5461:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>y,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var s=n(7462),l=(n(7294),n(3905));const a={id:"forbidden-sysctls",title:"Forbidden Sysctls"},r="Forbidden Sysctls",i={unversionedId:"validation/forbidden-sysctls",id:"validation/forbidden-sysctls",title:"Forbidden Sysctls",description:"Description",source:"@site/docs/validation/forbidden-sysctls.md",sourceDirName:"validation",slug:"/validation/forbidden-sysctls",permalink:"/gatekeeper-library/website/validation/forbidden-sysctls",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/validation/forbidden-sysctls.md",tags:[],version:"current",frontMatter:{id:"forbidden-sysctls",title:"Forbidden Sysctls"},sidebar:"docs",previous:{title:"FlexVolumes",permalink:"/gatekeeper-library/website/validation/flexvolume-drivers"},next:{title:"FS Group",permalink:"/gatekeeper-library/website/validation/fsgroup"}},o={},d=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}],c={toc:d},p="wrapper";function y(e){let{components:t,...n}=e;return(0,l.kt)(p,(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"forbidden-sysctls"},"Forbidden Sysctls"),(0,l.kt)("h2",{id:"description"},"Description"),(0,l.kt)("p",null,"Controls the ",(0,l.kt)("inlineCode",{parentName:"p"},"sysctl")," profile used by containers. Corresponds to the ",(0,l.kt)("inlineCode",{parentName:"p"},"allowedUnsafeSysctls")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"forbiddenSysctls")," fields in a PodSecurityPolicy. When specified, any sysctl not in the ",(0,l.kt)("inlineCode",{parentName:"p"},"allowedSysctls")," parameter is considered to be forbidden. The ",(0,l.kt)("inlineCode",{parentName:"p"},"forbiddenSysctls")," parameter takes precedence over the ",(0,l.kt)("inlineCode",{parentName:"p"},"allowedSysctls")," parameter. For more information, see ",(0,l.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/"},"https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/")),(0,l.kt)("h2",{id:"template"},"Template"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspforbiddensysctls\n  annotations:\n    metadata.gatekeeper.sh/title: "Forbidden Sysctls"\n    metadata.gatekeeper.sh/version: 1.1.3\n    description: >-\n      Controls the `sysctl` profile used by containers. Corresponds to the\n      `allowedUnsafeSysctls` and `forbiddenSysctls` fields in a PodSecurityPolicy.\n      When specified, any sysctl not in the `allowedSysctls` parameter is considered to be forbidden.\n      The `forbiddenSysctls` parameter takes precedence over the `allowedSysctls` parameter.\n      For more information, see https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPForbiddenSysctls\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Controls the `sysctl` profile used by containers. Corresponds to the\n            `allowedUnsafeSysctls` and `forbiddenSysctls` fields in a PodSecurityPolicy.\n            When specified, any sysctl not in the `allowedSysctls` parameter is considered to be forbidden.\n            The `forbiddenSysctls` parameter takes precedence over the `allowedSysctls` parameter.\n            For more information, see https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/\n          properties:\n            allowedSysctls:\n              type: array\n              description: "An allow-list of sysctls. `*` allows all sysctls not listed in the `forbiddenSysctls` parameter."\n              items:\n                type: string\n            forbiddenSysctls:\n              type: array\n              description: "A disallow-list of sysctls. `*` forbids all sysctls."\n              items:\n                type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8spspforbiddensysctls\n\n        import data.lib.exclude_update.is_update\n\n        # Block if forbidden\n        violation[{"msg": msg, "details": {}}] {\n            # spec.securityContext.sysctls field is immutable.\n            not is_update(input.review)\n\n            sysctl := input.review.object.spec.securityContext.sysctls[_].name\n            forbidden_sysctl(sysctl)\n            msg := sprintf("The sysctl %v is not allowed, pod: %v. Forbidden sysctls: %v", [sysctl, input.review.object.metadata.name, input.parameters.forbiddenSysctls])\n        }\n\n        # Block if not explicitly allowed\n        violation[{"msg": msg, "details": {}}] {\n            not is_update(input.review)\n            sysctl := input.review.object.spec.securityContext.sysctls[_].name\n            not allowed_sysctl(sysctl)\n            msg := sprintf("The sysctl %v is not explicitly allowed, pod: %v. Allowed sysctls: %v", [sysctl, input.review.object.metadata.name, input.parameters.allowedSysctls])\n        }\n\n        # * may be used to forbid all sysctls\n        forbidden_sysctl(_) {\n            input.parameters.forbiddenSysctls[_] == "*"\n        }\n\n        forbidden_sysctl(sysctl) {\n            input.parameters.forbiddenSysctls[_] == sysctl\n        }\n\n        forbidden_sysctl(sysctl) {\n            forbidden := input.parameters.forbiddenSysctls[_]\n            endswith(forbidden, "*")\n            startswith(sysctl, trim_suffix(forbidden, "*"))\n        }\n\n        # * may be used to allow all sysctls\n        allowed_sysctl(_) {\n            input.parameters.allowedSysctls[_] == "*"\n        }\n\n        allowed_sysctl(sysctl) {\n            input.parameters.allowedSysctls[_] == sysctl\n        }\n\n        allowed_sysctl(sysctl) {\n            allowed := input.parameters.allowedSysctls[_]\n            endswith(allowed, "*")\n            startswith(sysctl, trim_suffix(allowed, "*"))\n        }\n      libs:\n        - |\n          package lib.exclude_update\n\n          is_update(review) {\n              review.operation == "UPDATE"\n          }\n\n')),(0,l.kt)("h3",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/forbidden-sysctls/template.yaml\n")),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"forbidden-sysctls"),(0,l.kt)("blockquote",null,(0,l.kt)("details",null,(0,l.kt)("summary",null,"constraint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPForbiddenSysctls\nmetadata:\n  name: psp-forbidden-sysctls\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n  parameters:\n    forbiddenSysctls:\n    # - "*" # * may be used to forbid all sysctls\n    - kernel.*\n    allowedSysctls:\n    - "*" # allows all sysctls. allowedSysctls is optional.\n\n')),(0,l.kt)("p",null,"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/forbidden-sysctls/samples/psp-forbidden-sysctls/constraint.yaml\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"example-disallowed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-forbidden-sysctls-disallowed\n  labels:\n    app: nginx-forbidden-sysctls\nspec:\n  containers:\n    - name: nginx\n      image: nginx\n  securityContext:\n    sysctls:\n      - name: kernel.msgmax\n        value: "65536"\n      - name: net.core.somaxconn\n        value: "1024"\n\n')),(0,l.kt)("p",null,"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/forbidden-sysctls/samples/psp-forbidden-sysctls/example_disallowed.yaml\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"example-allowed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-forbidden-sysctls-disallowed\n  labels:\n    app: nginx-forbidden-sysctls\nspec:\n  containers:\n    - name: nginx\n      image: nginx\n  securityContext:\n    sysctls:\n      - name: net.core.somaxconn\n        value: "1024"\n\n')),(0,l.kt)("p",null,"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/forbidden-sysctls/samples/psp-forbidden-sysctls/example_allowed.yaml\n"))))))}y.isMDXComponent=!0}}]);