"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5568],{6123:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var a=s(5893),r=s(1151);const t={id:"block-wildcard-ingress",title:"Block Wildcard Ingress"},i="Block Wildcard Ingress",l={id:"validation/block-wildcard-ingress",title:"Block Wildcard Ingress",description:"Description",source:"@site/docs/validation/block-wildcard-ingress.md",sourceDirName:"validation",slug:"/validation/block-wildcard-ingress",permalink:"/gatekeeper-library/website/validation/block-wildcard-ingress",draft:!1,unlisted:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/validation/block-wildcard-ingress.md",tags:[],version:"current",frontMatter:{id:"block-wildcard-ingress",title:"Block Wildcard Ingress"},sidebar:"docs",previous:{title:"Block NodePort",permalink:"/gatekeeper-library/website/validation/block-nodeport-services"},next:{title:"Container Limits",permalink:"/gatekeeper-library/website/validation/containerlimits"}},c={},o=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"block-wildcard-ingress",children:"Block Wildcard Ingress"}),"\n",(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(n.p,{children:"Users should not be able to create Ingresses with a blank or wildcard (*) hostname since that would enable them to intercept traffic for other services in the cluster, even if they don't have access to those services."}),"\n",(0,a.jsx)(n.h2,{id:"template",children:"Template"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8sblockwildcardingress\n  annotations:\n    metadata.gatekeeper.sh/title: "Block Wildcard Ingress"\n    metadata.gatekeeper.sh/version: 1.0.1\n    description: >-\n      Users should not be able to create Ingresses with a blank or wildcard (*) hostname since that would enable them to intercept traffic for other services in the cluster, even if they don\'t have access to those services.\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sBlockWildcardIngress\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package K8sBlockWildcardIngress\n\n        contains_wildcard(hostname) = true {\n          hostname == ""\n        }\n\n        contains_wildcard(hostname) = true {\n          contains(hostname, "*")\n        }\n\n        violation[{"msg": msg}] {\n          input.review.kind.kind == "Ingress"\n          # object.get is required to detect omitted host fields\n          hostname := object.get(input.review.object.spec.rules[_], "host", "")\n          contains_wildcard(hostname)\n          msg := sprintf("Hostname \'%v\' is not allowed since it counts as a wildcard, which can be used to intercept traffic from other applications.", [hostname])\n        }\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/block-wildcard-ingress/template.yaml\n"})}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"block-wildcard-ingress"}),(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"constraint"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sBlockWildcardIngress\nmetadata:\n  name: block-wildcard-ingress\nspec:\n  match:\n    kinds:\n      - apiGroups: ["extensions", "networking.k8s.io"]\n        kinds: ["Ingress"]\n\n'})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/block-wildcard-ingress/samples/block-wildcard-ingress/constraint.yaml\n"})})]}),(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"example-allowed"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: non-wildcard-ingress\nspec:\n  rules:\n  - host: 'myservice.example.com'\n    http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: example\n            port:\n              number: 80\n\n"})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/block-wildcard-ingress/samples/block-wildcard-ingress/example_allowed.yaml\n"})})]}),(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"blank-host"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: wildcard-ingress\nspec:\n  rules:\n  - host: ''\n    http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: example\n            port:\n              number: 80\n\n"})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/block-wildcard-ingress/samples/block-wildcard-ingress/disallowed/blank_host.yaml\n"})})]}),(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"host-omitted"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: wildcard-ingress\nspec:\n  rules:\n  # Omitted host field counts as a wildcard too\n  - http:\n      paths:\n      - pathType: Prefix\n        path: "/"\n        backend:\n          service:\n            name: example\n            port:\n              number: 80\n\n'})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/block-wildcard-ingress/samples/block-wildcard-ingress/disallowed/host_omitted.yaml\n"})})]}),(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"wildcard-host"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: wildcard-ingress\nspec:\n  rules:\n  - host: '*.example.com'\n    http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: example\n            port:\n              number: 80\n  # Extra test to ensure the rule still detects invalid hosts in files containing valid hosts\n  - host: 'valid.example.com'\n    http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: example\n            port:\n              number: 80\n\n"})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/block-wildcard-ingress/samples/block-wildcard-ingress/disallowed/wildcard_host.yaml\n"})})]})]})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>i});var a=s(7294);const r={},t=a.createContext(r);function i(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);