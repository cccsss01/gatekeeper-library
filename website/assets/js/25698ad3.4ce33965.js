"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9053],{2895:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=s(5893),t=s(1151);const i={id:"users",title:"Allowed Users"},a="Allowed Users",o={id:"validation/users",title:"Allowed Users",description:"Description",source:"@site/docs/validation/users.md",sourceDirName:"validation",slug:"/validation/users",permalink:"/gatekeeper-library/website/validation/users",draft:!1,unlisted:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/validation/users.md",tags:[],version:"current",frontMatter:{id:"users",title:"Allowed Users"},sidebar:"docs",previous:{title:"SELinux V2",permalink:"/gatekeeper-library/website/validation/selinux"},next:{title:"Volume Types",permalink:"/gatekeeper-library/website/validation/volumes"}},l={},p=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"allowed-users",children:"Allowed Users"}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["Controls the user and group IDs of the container and some volumes. Corresponds to the ",(0,r.jsx)(n.code,{children:"runAsUser"}),", ",(0,r.jsx)(n.code,{children:"runAsGroup"}),", ",(0,r.jsx)(n.code,{children:"supplementalGroups"}),", and ",(0,r.jsx)(n.code,{children:"fsGroup"})," fields in a PodSecurityPolicy. For more information, see ",(0,r.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups",children:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups"})]}),"\n",(0,r.jsx)(n.h2,{id:"template",children:"Template"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspallowedusers\n  annotations:\n    metadata.gatekeeper.sh/title: "Allowed Users"\n    metadata.gatekeeper.sh/version: 1.0.2\n    description: >-\n      Controls the user and group IDs of the container and some volumes.\n      Corresponds to the `runAsUser`, `runAsGroup`, `supplementalGroups`, and\n      `fsGroup` fields in a PodSecurityPolicy. For more information, see\n      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPAllowedUsers\n      validation:\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Controls the user and group IDs of the container and some volumes.\n            Corresponds to the `runAsUser`, `runAsGroup`, `supplementalGroups`, and\n            `fsGroup` fields in a PodSecurityPolicy. For more information, see\n            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups\n          properties:\n            exemptImages:\n              description: >-\n                Any container that uses an image that matches an entry in this list will be excluded\n                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.\n\n                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)\n                in order to avoid unexpectedly exempting images from an untrusted repository.\n              type: array\n              items:\n                type: string\n            runAsUser:\n              type: object\n              description: "Controls which user ID values are allowed in a Pod or container-level SecurityContext."\n              properties:\n                rule:\n                  type: string\n                  description: "A strategy for applying the runAsUser restriction."\n                  enum:\n                    - MustRunAs\n                    - MustRunAsNonRoot\n                    - RunAsAny\n                ranges:\n                  type: array\n                  description: "A list of user ID ranges affected by the rule."\n                  items:\n                    type: object\n                    description: "The range of user IDs affected by the rule."\n                    properties:\n                      min:\n                        type: integer\n                        description: "The minimum user ID in the range, inclusive."\n                      max:\n                        type: integer\n                        description: "The maximum user ID in the range, inclusive."\n            runAsGroup:\n              type: object\n              description: "Controls which group ID values are allowed in a Pod or container-level SecurityContext."\n              properties:\n                rule:\n                  type: string\n                  description: "A strategy for applying the runAsGroup restriction."\n                  enum:\n                    - MustRunAs\n                    - MayRunAs\n                    - RunAsAny\n                ranges:\n                  type: array\n                  description: "A list of group ID ranges affected by the rule."\n                  items:\n                    type: object\n                    description: "The range of group IDs affected by the rule."\n                    properties:\n                      min:\n                        type: integer\n                        description: "The minimum group ID in the range, inclusive."\n                      max:\n                        type: integer\n                        description: "The maximum group ID in the range, inclusive."\n            supplementalGroups:\n              type: object\n              description: "Controls the supplementalGroups values that are allowed in a Pod or container-level SecurityContext."\n              properties:\n                rule:\n                  type: string\n                  description: "A strategy for applying the supplementalGroups restriction."\n                  enum:\n                    - MustRunAs\n                    - MayRunAs\n                    - RunAsAny\n                ranges:\n                  type: array\n                  description: "A list of group ID ranges affected by the rule."\n                  items:\n                    type: object\n                    description: "The range of group IDs affected by the rule."\n                    properties:\n                      min:\n                        type: integer\n                        description: "The minimum group ID in the range, inclusive."\n                      max:\n                        type: integer\n                        description: "The maximum group ID in the range, inclusive."\n            fsGroup:\n              type: object\n              description: "Controls the fsGroup values that are allowed in a Pod or container-level SecurityContext."\n              properties:\n                rule:\n                  type: string\n                  description: "A strategy for applying the fsGroup restriction."\n                  enum:\n                    - MustRunAs\n                    - MayRunAs\n                    - RunAsAny\n                ranges:\n                  type: array\n                  description: "A list of group ID ranges affected by the rule."\n                  items:\n                    type: object\n                    description: "The range of group IDs affected by the rule."\n                    properties:\n                      min:\n                        type: integer\n                        description: "The minimum group ID in the range, inclusive."\n                      max:\n                        type: integer\n                        description: "The maximum group ID in the range, inclusive."\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8spspallowedusers\n\n        import data.lib.exclude_update.is_update\n        import data.lib.exempt_container.is_exempt\n\n        violation[{"msg": msg}] {\n          # runAsUser, runAsGroup, supplementalGroups, fsGroup fields are immutable.\n          not is_update(input.review)\n\n          fields := ["runAsUser", "runAsGroup", "supplementalGroups", "fsGroup"]\n          field := fields[_]\n          container := input_containers[_]\n          not is_exempt(container)\n          msg := get_type_violation(field, container)\n        }\n\n        get_type_violation(field, container) = msg {\n          field == "runAsUser"\n          params := input.parameters[field]\n          msg := get_user_violation(params, container)\n        }\n\n        get_type_violation(field, container) = msg {\n          field != "runAsUser"\n          params := input.parameters[field]\n          msg := get_violation(field, params, container)\n        }\n\n        # RunAsUser (separate due to "MustRunAsNonRoot")\n        get_user_violation(params, container) = msg {\n          rule := params.rule\n          provided_user := get_field_value("runAsUser", container, input.review)\n          not accept_users(rule, provided_user)\n          msg := sprintf("Container %v is attempting to run as disallowed user %v. Allowed runAsUser: %v", [container.name, provided_user, params])\n        }\n\n        get_user_violation(params, container) = msg {\n          not get_field_value("runAsUser", container, input.review)\n          params.rule = "MustRunAs"\n          msg := sprintf("Container %v is attempting to run without a required securityContext/runAsUser", [container.name])\n        }\n\n        get_user_violation(params, container) = msg {\n          params.rule = "MustRunAsNonRoot"\n          not get_field_value("runAsUser", container, input.review)\n          not get_field_value("runAsNonRoot", container, input.review)\n          msg := sprintf("Container %v is attempting to run without a required securityContext/runAsNonRoot or securityContext/runAsUser != 0", [container.name])\n        }\n\n        accept_users("RunAsAny", _)\n\n        accept_users("MustRunAsNonRoot", provided_user) := provided_user != 0\n\n        accept_users("MustRunAs", provided_user) := res  {\n          ranges := input.parameters.runAsUser.ranges\n          res := is_in_range(provided_user, ranges)\n        }\n\n        # Group Options\n        get_violation(field, params, container) = msg {\n          rule := params.rule\n          provided_value := get_field_value(field, container, input.review)\n          not is_array(provided_value)\n          not accept_value(rule, provided_value, params.ranges)\n          msg := sprintf("Container %v is attempting to run as disallowed group %v. Allowed %v: %v", [container.name, provided_value, field, params])\n        }\n        # SupplementalGroups is array value\n        get_violation(field, params, container) = msg {\n          rule := params.rule\n          array_value := get_field_value(field, container, input.review)\n          is_array(array_value)\n          provided_value := array_value[_]\n          not accept_value(rule, provided_value, params.ranges)\n          msg := sprintf("Container %v is attempting to run with disallowed supplementalGroups %v. Allowed %v: %v", [container.name, array_value, field, params])\n        }\n\n        get_violation(field, params, container) = msg {\n          not get_field_value(field, container, input.review)\n          params.rule == "MustRunAs"\n          msg := sprintf("Container %v is attempting to run without a required securityContext/%v. Allowed %v: %v", [container.name, field, field, params])\n        }\n\n        accept_value("RunAsAny", _, _)\n\n        accept_value("MayRunAs", provided_value, ranges) := is_in_range(provided_value, ranges)\n\n        accept_value("MustRunAs", provided_value, ranges) := is_in_range(provided_value, ranges)\n\n\n        # If container level is provided, that takes precedence\n        get_field_value(field, container, _) := get_seccontext_field(field, container)\n\n        # If no container level exists, use pod level\n        get_field_value(field, container, review) = out {\n          not has_seccontext_field(field, container)\n          review.kind.kind == "Pod"\n          pod_value := get_seccontext_field(field, review.object.spec)\n          out := pod_value\n        }\n\n        # Helper Functions\n        is_in_range(val, ranges) = res {\n          matching := {1 | val >= ranges[j].min; val <= ranges[j].max}\n          res := count(matching) > 0\n        }\n\n        has_seccontext_field(field, obj) {\n          get_seccontext_field(field, obj)\n        }\n\n        has_seccontext_field(field, obj) {\n          get_seccontext_field(field, obj) == false\n        }\n\n        get_seccontext_field(field, obj) = out {\n          out = obj.securityContext[field]\n        }\n\n        input_containers[c] {\n          c := input.review.object.spec.containers[_]\n        }\n        input_containers[c] {\n          c := input.review.object.spec.initContainers[_]\n        }\n        input_containers[c] {\n            c := input.review.object.spec.ephemeralContainers[_]\n        }\n      libs:\n        - |\n          package lib.exclude_update\n\n          is_update(review) {\n              review.operation == "UPDATE"\n          }\n        - |\n          package lib.exempt_container\n\n          is_exempt(container) {\n              exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])\n              img := container.image\n              exemption := exempt_images[_]\n              _matches_exemption(img, exemption)\n          }\n\n          _matches_exemption(img, exemption) {\n              not endswith(exemption, "*")\n              exemption == img\n          }\n\n          _matches_exemption(img, exemption) {\n              endswith(exemption, "*")\n              prefix := trim_suffix(exemption, "*")\n              startswith(img, prefix)\n          }\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/users/template.yaml\n"})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"users-and-groups-together"}),(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"constraint"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPAllowedUsers\nmetadata:\n  name: psp-pods-allowed-user-ranges\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n  parameters:\n    runAsUser:\n      rule: MustRunAs # MustRunAsNonRoot # RunAsAny \n      ranges:\n        - min: 100\n          max: 200\n    runAsGroup:\n      rule: MustRunAs # MayRunAs # RunAsAny \n      ranges:\n        - min: 100\n          max: 200\n    supplementalGroups:\n      rule: MustRunAs # MayRunAs # RunAsAny \n      ranges:\n        - min: 100\n          max: 200\n    fsGroup:\n      rule: MustRunAs # MayRunAs # RunAsAny \n      ranges:\n        - min: 100\n          max: 200\n\n'})}),(0,r.jsx)(n.p,{children:"Usage"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/users/samples/psp-pods-allowed-user-ranges/constraint.yaml\n"})})]}),(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"example-disallowed"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-users-disallowed\n  labels:\n    app: nginx-users\nspec:\n  securityContext:\n    supplementalGroups:\n      - 250\n    fsGroup: 250\n  containers:\n    - name: nginx\n      image: nginx\n      securityContext:\n        runAsUser: 250\n        runAsGroup: 250\n\n"})}),(0,r.jsx)(n.p,{children:"Usage"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/users/samples/psp-pods-allowed-user-ranges/example_disallowed.yaml\n"})})]}),(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"example-allowed"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-users-allowed\n  labels:\n    app: nginx-users\nspec:\n  securityContext:\n    supplementalGroups:\n      - 199\n    fsGroup: 199\n  containers:\n    - name: nginx\n      image: nginx\n      securityContext:\n        runAsUser: 199\n        runAsGroup: 199\n\n"})}),(0,r.jsx)(n.p,{children:"Usage"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/users/samples/psp-pods-allowed-user-ranges/example_allowed.yaml\n"})})]}),(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"disallowed-ephemeral"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-users-disallowed\n  labels:\n    app: nginx-users\nspec:\n  securityContext:\n    supplementalGroups:\n      - 250\n    fsGroup: 250\n  ephemeralContainers:\n    - name: nginx\n      image: nginx\n      securityContext:\n        runAsUser: 250\n        runAsGroup: 250\n\n"})}),(0,r.jsx)(n.p,{children:"Usage"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/users/samples/psp-pods-allowed-user-ranges/disallowed_ephemeral.yaml\n"})})]})]})]})}function c(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>a});var r=s(7294);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);