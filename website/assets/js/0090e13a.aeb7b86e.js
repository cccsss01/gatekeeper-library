"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7108],{2017:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var t=a(5893),r=a(1151);const i={id:"apparmor",title:"App Armor"},o="App Armor",s={id:"validation/apparmor",title:"App Armor",description:"Description",source:"@site/docs/validation/apparmor.md",sourceDirName:"validation",slug:"/validation/apparmor",permalink:"/gatekeeper-library/website/validation/apparmor",draft:!1,unlisted:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/validation/apparmor.md",tags:[],version:"current",frontMatter:{id:"apparmor",title:"App Armor"},sidebar:"docs",previous:{title:"Allow Privilege Escalation in Container",permalink:"/gatekeeper-library/website/validation/allow-privilege-escalation"},next:{title:"Capabilities",permalink:"/gatekeeper-library/website/validation/capabilities"}},p={},l=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"app-armor",children:"App Armor"}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:["Configures an allow-list of AppArmor profiles for use by containers. This corresponds to specific annotations applied to a PodSecurityPolicy. For information on AppArmor, see ",(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/tutorials/clusters/apparmor/",children:"https://kubernetes.io/docs/tutorials/clusters/apparmor/"})]}),"\n",(0,t.jsx)(n.h2,{id:"template",children:"Template"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspapparmor\n  annotations:\n    metadata.gatekeeper.sh/title: "App Armor"\n    metadata.gatekeeper.sh/version: 1.0.0\n    description: >-\n      Configures an allow-list of AppArmor profiles for use by containers.\n      This corresponds to specific annotations applied to a PodSecurityPolicy.\n      For information on AppArmor, see\n      https://kubernetes.io/docs/tutorials/clusters/apparmor/\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPAppArmor\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Configures an allow-list of AppArmor profiles for use by containers.\n            This corresponds to specific annotations applied to a PodSecurityPolicy.\n            For information on AppArmor, see\n            https://kubernetes.io/docs/tutorials/clusters/apparmor/\n          properties:\n            exemptImages:\n              description: >-\n                Any container that uses an image that matches an entry in this list will be excluded\n                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.\n\n                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)\n                in order to avoid unexpectedly exempting images from an untrusted repository.\n              type: array\n              items:\n                type: string\n            allowedProfiles:\n              description: "An array of AppArmor profiles. Examples: `runtime/default`, `unconfined`."\n              type: array\n              items:\n                type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8spspapparmor\n\n        import data.lib.exempt_container.is_exempt\n\n        violation[{"msg": msg, "details": {}}] {\n            metadata := input.review.object.metadata\n            container := input_containers[_]\n            not is_exempt(container)\n            not input_apparmor_allowed(container, metadata)\n            msg := sprintf("AppArmor profile is not allowed, pod: %v, container: %v. Allowed profiles: %v", [input.review.object.metadata.name, container.name, input.parameters.allowedProfiles])\n        }\n\n        input_apparmor_allowed(container, metadata) {\n            get_annotation_for(container, metadata) == input.parameters.allowedProfiles[_]\n        }\n\n        input_containers[c] {\n            c := input.review.object.spec.containers[_]\n        }\n        input_containers[c] {\n            c := input.review.object.spec.initContainers[_]\n        }\n        input_containers[c] {\n            c := input.review.object.spec.ephemeralContainers[_]\n        }\n\n        get_annotation_for(container, metadata) = out {\n            out = metadata.annotations[sprintf("container.apparmor.security.beta.kubernetes.io/%v", [container.name])]\n        }\n        get_annotation_for(container, metadata) = out {\n            not metadata.annotations[sprintf("container.apparmor.security.beta.kubernetes.io/%v", [container.name])]\n            out = "runtime/default"\n        }\n      libs:\n        - |\n          package lib.exempt_container\n\n          is_exempt(container) {\n              exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])\n              img := container.image\n              exemption := exempt_images[_]\n              _matches_exemption(img, exemption)\n          }\n\n          _matches_exemption(img, exemption) {\n              not endswith(exemption, "*")\n              exemption == img\n          }\n\n          _matches_exemption(img, exemption) {\n              endswith(exemption, "*")\n              prefix := trim_suffix(exemption, "*")\n              startswith(img, prefix)\n          }\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/template.yaml\n"})}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"apparmor"}),(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"constraint"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPAppArmor\nmetadata:\n  name: psp-apparmor\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n  parameters:\n    allowedProfiles:\n    - runtime/default\n\n'})}),(0,t.jsx)(n.p,{children:"Usage"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/samples/psp-apparmor/constraint.yaml\n"})})]}),(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"example-allowed"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-apparmor-allowed\n  annotations:\n    # apparmor.security.beta.kubernetes.io/pod: unconfined # runtime/default\n    container.apparmor.security.beta.kubernetes.io/nginx: runtime/default\n  labels:\n    app: nginx-apparmor\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n\n"})}),(0,t.jsx)(n.p,{children:"Usage"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/samples/psp-apparmor/example_allowed.yaml\n"})})]}),(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"example-disallowed"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-apparmor-disallowed\n  annotations:\n    # apparmor.security.beta.kubernetes.io/pod: unconfined # runtime/default\n    container.apparmor.security.beta.kubernetes.io/nginx: unconfined\n  labels:\n    app: nginx-apparmor\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n\n"})}),(0,t.jsx)(n.p,{children:"Usage"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/samples/psp-apparmor/example_disallowed.yaml\n"})})]}),(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"disallowed-ephemeral"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-apparmor-disallowed\n  annotations:\n    # apparmor.security.beta.kubernetes.io/pod: unconfined # runtime/default\n    container.apparmor.security.beta.kubernetes.io/nginx: unconfined\n  labels:\n    app: nginx-apparmor\nspec:\n  ephemeralContainers:\n  - name: nginx\n    image: nginx\n\n"})}),(0,t.jsx)(n.p,{children:"Usage"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/apparmor/samples/psp-apparmor/disallowed_ephemeral.yaml\n"})})]})]})]})}function m(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>s,a:()=>o});var t=a(7294);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);