"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6942],{8516:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var t=o(5893),i=o(1151);const a={id:"seccomp",title:"Seccomp"},l="Seccomp",s={id:"validation/seccomp",title:"Seccomp",description:"Description",source:"@site/docs/validation/seccomp.md",sourceDirName:"validation",slug:"/validation/seccomp",permalink:"/gatekeeper-library/website/validation/seccomp",draft:!1,unlisted:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/validation/seccomp.md",tags:[],version:"current",frontMatter:{id:"seccomp",title:"Seccomp"},sidebar:"docs",previous:{title:"Read Only Root Filesystem",permalink:"/gatekeeper-library/website/validation/read-only-root-filesystem"},next:{title:"SELinux V2",permalink:"/gatekeeper-library/website/validation/selinux"}},r={},c=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"seccomp",children:"Seccomp"}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:["Controls the seccomp profile used by containers. Corresponds to the ",(0,t.jsx)(n.code,{children:"seccomp.security.alpha.kubernetes.io/allowedProfileNames"})," annotation on a PodSecurityPolicy. For more information, see ",(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp",children:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp"})]}),"\n",(0,t.jsx)(n.h2,{id:"template",children:"Template"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspseccomp\n  annotations:\n    metadata.gatekeeper.sh/title: "Seccomp"\n    metadata.gatekeeper.sh/version: 1.0.1\n    description: >-\n      Controls the seccomp profile used by containers. Corresponds to the\n      `seccomp.security.alpha.kubernetes.io/allowedProfileNames` annotation on\n      a PodSecurityPolicy. For more information, see\n      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPSeccomp\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Controls the seccomp profile used by containers. Corresponds to the\n            `seccomp.security.alpha.kubernetes.io/allowedProfileNames` annotation on\n            a PodSecurityPolicy. For more information, see\n            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp\n          properties:\n            exemptImages:\n              description: >-\n                Any container that uses an image that matches an entry in this list will be excluded\n                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.\n\n                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)\n                in order to avoid unexpectedly exempting images from an untrusted repository.\n              type: array\n              items:\n                type: string\n            allowedProfiles:\n              type: array\n              description: >-\n                An array of allowed profile values for seccomp on Pods/Containers.\n\n                Can use the annotation naming scheme: `runtime/default`, `docker/default`, `unconfined` and/or\n                `localhost/some-profile.json`. The item `localhost/*` will allow any localhost based profile.\n\n                Can also use the securityContext naming scheme: `RuntimeDefault`, `Unconfined`\n                and/or `Localhost`. For securityContext `Localhost`, use the parameter `allowedLocalhostProfiles`\n                to list the allowed profile JSON files.\n\n                The policy code will translate between the two schemes so it is not necessary to use both.\n\n                Putting a `*` in this array allows all Profiles to be used.\n\n                This field is required since with an empty list this policy will block all workloads.\n              items:\n                type: string\n            allowedLocalhostFiles:\n              type: array\n              description: >-\n                When using securityContext naming scheme for seccomp and including `Localhost` this array holds\n                the allowed profile JSON files.\n\n                Putting a `*` in this array will allows all JSON files to be used.\n\n                This field is required to allow `Localhost` in securityContext as with an empty list it will block.\n              items:\n                type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8spspseccomp\n\n        import data.lib.exempt_container.is_exempt\n\n        container_annotation_key_prefix = "container.seccomp.security.alpha.kubernetes.io/"\n\n        pod_annotation_key = "seccomp.security.alpha.kubernetes.io/pod"\n\n        naming_translation = {\n            # securityContext -> annotation\n            "RuntimeDefault": ["runtime/default", "docker/default"],\n            "Unconfined": ["unconfined"],\n            "Localhost": ["localhost"],\n            # annotation -> securityContext\n            "runtime/default": ["RuntimeDefault"],\n            "docker/default": ["RuntimeDefault"],\n            "unconfined": ["Unconfined"],\n            "localhost": ["Localhost"],\n        }\n\n        violation[{"msg": msg}] {\n            not input_wildcard_allowed_profiles\n            allowed_profiles := get_allowed_profiles\n            container := input_containers[name]\n            not is_exempt(container)\n            result := get_profile(container)\n            not allowed_profile(result.profile, result.file, allowed_profiles)\n            msg := get_message(result.profile, result.file, name, result.location, allowed_profiles)\n        }\n\n        get_message(profile, _, name, location, allowed_profiles) = message {\n            not profile == "Localhost"\n            message := sprintf("Seccomp profile \'%v\' is not allowed for container \'%v\'. Found at: %v. Allowed profiles: %v", [profile, name, location, allowed_profiles])\n        }\n\n        get_message(profile, file, name, location, allowed_profiles) = message {\n            profile == "Localhost"\n            message := sprintf("Seccomp profile \'%v\' with file \'%v\' is not allowed for container \'%v\'. Found at: %v. Allowed profiles: %v", [profile, file, name, location, allowed_profiles])\n        }\n\n        input_wildcard_allowed_profiles {\n            input.parameters.allowedProfiles[_] == "*"\n        }\n\n        input_wildcard_allowed_files {\n            input.parameters.allowedLocalhostFiles[_] == "*"\n        }\n\n        input_wildcard_allowed_files {\n            "localhost/*" == input.parameters.allowedProfiles[_]\n        }\n\n        # Simple allowed Profiles\n        allowed_profile(profile, _, allowed) {\n            not startswith(lower(profile), "localhost")\n            profile == allowed[_]\n        }\n\n        # seccomp Localhost without wildcard\n        allowed_profile(profile, file, allowed) {\n            profile == "Localhost"\n            not input_wildcard_allowed_files\n            profile == allowed[_]\n            allowed_files := {x | x := object.get(input.parameters, "allowedLocalhostFiles", [])[_]} | get_annotation_localhost_files\n            file == allowed_files[_]\n        }\n\n        # seccomp Localhost with wildcard\n        allowed_profile(profile, _, allowed) {\n            profile == "Localhost"\n            input_wildcard_allowed_files\n            profile == allowed[_]\n        }\n\n        # annotation localhost with wildcard\n        allowed_profile(profile, _, allowed) {\n            "localhost/*" == allowed[_]\n            startswith(profile, "localhost/")\n        }\n\n        # annotation localhost without wildcard\n        allowed_profile(profile, _, allowed) {\n            startswith(profile, "localhost/")\n            profile == allowed[_]\n        }\n\n        # Localhost files from annotation scheme\n        get_annotation_localhost_files[file] {\n            profile := input.parameters.allowedProfiles[_]\n            startswith(profile, "localhost/")\n            file := replace(profile, "localhost/", "")\n        }\n\n        # The profiles explicitly in the list\n        get_allowed_profiles[allowed] {\n            allowed := input.parameters.allowedProfiles[_]\n        }\n\n        # The simply translated profiles\n        get_allowed_profiles[allowed] {\n            profile := input.parameters.allowedProfiles[_]\n            not startswith(lower(profile), "localhost")\n            allowed := naming_translation[profile][_]\n        }\n\n        # Seccomp Localhost to annotation translation\n        get_allowed_profiles[allowed] {\n            profile := input.parameters.allowedProfiles[_]\n            profile == "Localhost"\n            file := object.get(input.parameters, "allowedLocalhostFiles", [])[_]\n            allowed := sprintf("%v/%v", [naming_translation[profile][_], file])\n        }\n\n        # Annotation localhost to Seccomp translation\n        get_allowed_profiles[allowed] {\n            profile := input.parameters.allowedProfiles[_]\n            startswith(profile, "localhost")\n            allowed := naming_translation.localhost[_]\n        }\n\n        # Container profile as defined in pod annotation\n        get_profile(container) = {"profile": profile, "file": "", "location": location} {\n            not has_securitycontext_container(container)\n            not has_annotation(get_container_annotation_key(container.name))\n            not has_securitycontext_pod\n            profile := input.review.object.metadata.annotations[pod_annotation_key]\n            location := sprintf("annotation %v", [pod_annotation_key])\n        }\n\n        # Container profile as defined in container annotation\n        get_profile(container) = {"profile": profile, "file": "", "location": location} {\n            not has_securitycontext_container(container)\n            not has_securitycontext_pod\n            container_annotation := get_container_annotation_key(container.name)\n            has_annotation(container_annotation)\n            profile := input.review.object.metadata.annotations[container_annotation]\n            location := sprintf("annotation %v", [container_annotation])\n        }\n\n        # Container profile as defined in pods securityContext\n        get_profile(container) = {"profile": profile, "file": file, "location": location} {\n            not has_securitycontext_container(container)\n            profile := input.review.object.spec.securityContext.seccompProfile.type\n            file := object.get(input.review.object.spec.securityContext.seccompProfile, "localhostProfile", "")\n            location := "pod securityContext"\n        }\n\n        # Container profile as defined in containers securityContext\n        get_profile(container) = {"profile": profile, "file": file, "location": location} {\n            has_securitycontext_container(container)\n            profile := container.securityContext.seccompProfile.type\n            file := object.get(container.securityContext.seccompProfile, "localhostProfile", "")\n            location := "container securityContext"\n        }\n\n        # Container profile missing\n        get_profile(container) = {"profile": "not configured", "file": "", "location": "no explicit profile found"} {\n            not has_annotation(get_container_annotation_key(container.name))\n            not has_annotation(pod_annotation_key)\n            not has_securitycontext_pod\n            not has_securitycontext_container(container)\n        }\n\n        has_annotation(annotation) {\n            input.review.object.metadata.annotations[annotation]\n        }\n\n        has_securitycontext_pod {\n            input.review.object.spec.securityContext.seccompProfile\n        }\n\n        has_securitycontext_container(container) {\n            container.securityContext.seccompProfile\n        }\n\n        get_container_annotation_key(name) = annotation {\n            annotation := concat("", [container_annotation_key_prefix, name])\n        }\n\n        input_containers[container.name] = container {\n            container := input.review.object.spec.containers[_]\n        }\n\n        input_containers[container.name] = container {\n            container := input.review.object.spec.initContainers[_]\n        }\n\n        input_containers[container.name] = container {\n            container := input.review.object.spec.ephemeralContainers[_]\n        }\n      libs:\n        - |\n          package lib.exempt_container\n\n          is_exempt(container) {\n              exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])\n              img := container.image\n              exemption := exempt_images[_]\n              _matches_exemption(img, exemption)\n          }\n\n          _matches_exemption(img, exemption) {\n              not endswith(exemption, "*")\n              exemption == img\n          }\n\n          _matches_exemption(img, exemption) {\n              endswith(exemption, "*")\n              prefix := trim_suffix(exemption, "*")\n              startswith(img, prefix)\n          }\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/seccomp/template.yaml\n"})}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsx)("summary",{children:"default-seccomp-required"}),(0,t.jsxs)(o,{children:[(0,t.jsx)("summary",{children:"constraint"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPSeccomp\nmetadata:\n  name: psp-seccomp\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n  parameters:\n    allowedProfiles:\n    - runtime/default\n    - docker/default\n\n'})}),(0,t.jsx)(n.p,{children:"Usage"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/seccomp/samples/psp-seccomp/constraint.yaml\n"})})]}),(0,t.jsxs)(o,{children:[(0,t.jsx)("summary",{children:"example-disallowed-global"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-seccomp-disallowed2\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: unconfined\n  labels:\n    app: nginx-seccomp\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n\n"})}),(0,t.jsx)(n.p,{children:"Usage"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/seccomp/samples/psp-seccomp/example_disallowed2.yaml\n"})})]}),(0,t.jsxs)(o,{children:[(0,t.jsx)("summary",{children:"example-disallowed-container"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-seccomp-disallowed\n  annotations:\n    container.seccomp.security.alpha.kubernetes.io/nginx: unconfined\n  labels:\n    app: nginx-seccomp\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n\n"})}),(0,t.jsx)(n.p,{children:"Usage"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/seccomp/samples/psp-seccomp/example_disallowed.yaml\n"})})]}),(0,t.jsxs)(o,{children:[(0,t.jsx)("summary",{children:"example-allowed-container"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-seccomp-allowed\n  annotations:\n    container.seccomp.security.alpha.kubernetes.io/nginx: runtime/default\n  labels:\n    app: nginx-seccomp\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n\n"})}),(0,t.jsx)(n.p,{children:"Usage"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/seccomp/samples/psp-seccomp/example_allowed.yaml\n"})})]}),(0,t.jsxs)(o,{children:[(0,t.jsx)("summary",{children:"example-allowed-global"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-seccomp-allowed2\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: runtime/default\n  labels:\n    app: nginx-seccomp\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n\n"})}),(0,t.jsx)(n.p,{children:"Usage"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/seccomp/samples/psp-seccomp/example_allowed2.yaml\n"})})]}),(0,t.jsxs)(o,{children:[(0,t.jsx)("summary",{children:"disallowed-ephemeral"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-seccomp-disallowed\n  annotations:\n    container.seccomp.security.alpha.kubernetes.io/nginx: unconfined\n  labels:\n    app: nginx-seccomp\nspec:\n  ephemeralContainers:\n  - name: nginx\n    image: nginx\n\n"})}),(0,t.jsx)(n.p,{children:"Usage"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/seccomp/samples/psp-seccomp/disallowed_ephemeral.yaml\n"})})]})]})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>s,a:()=>l});var t=o(7294);const i={},a=t.createContext(i);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);