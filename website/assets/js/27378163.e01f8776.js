"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4659],{5849:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=t(5893),o=t(1151);const s={id:"noupdateserviceaccount",title:"Block updating Service Account"},c="Block updating Service Account",i={id:"validation/noupdateserviceaccount",title:"Block updating Service Account",description:"Description",source:"@site/docs/validation/noupdateserviceaccount.md",sourceDirName:"validation",slug:"/validation/noupdateserviceaccount",permalink:"/gatekeeper-library/website/validation/noupdateserviceaccount",draft:!1,unlisted:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/validation/noupdateserviceaccount.md",tags:[],version:"current",frontMatter:{id:"noupdateserviceaccount",title:"Block updating Service Account"},sidebar:"docs",previous:{title:"Image Digests",permalink:"/gatekeeper-library/website/validation/imagedigests"},next:{title:"Pod Disruption Budget",permalink:"/gatekeeper-library/website/validation/poddisruptionbudget"}},r={},l=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"block-updating-service-account",children:"Block updating Service Account"}),"\n",(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(n.p,{children:"Blocks updating the service account on resources that abstract over Pods. This policy is ignored in audit mode."}),"\n",(0,a.jsx)(n.h2,{id:"template",children:"Template"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: noupdateserviceaccount\n  annotations:\n    metadata.gatekeeper.sh/title: "Block updating Service Account"\n    metadata.gatekeeper.sh/version: 1.0.1\n    description: "Blocks updating the service account on resources that abstract over Pods. This policy is ignored in audit mode."\nspec:\n  crd:\n    spec:\n      names:\n        kind: NoUpdateServiceAccount\n      validation:\n        openAPIV3Schema:\n          type: object\n          properties:\n            allowedGroups:\n              description: Groups that should be allowed to bypass the policy.\n              type: array\n              items:\n                type: string\n            allowedUsers:\n              description: Users that should be allowed to bypass the policy.\n              type: array\n              items:\n                type: string\n  targets:\n  - target: admission.k8s.gatekeeper.sh\n    rego: |\n      package noupdateserviceaccount\n\n      privileged(userInfo, allowedUsers, _) {\n        # Allow if the user is in allowedUsers.\n        # Use object.get so omitted parameters can\'t cause policy bypass by\n        # evaluating to undefined.\n        username := object.get(userInfo, "username", "")\n        allowedUsers[_] == username\n      }\n\n      privileged(userInfo, _, allowedGroups) {\n        # Allow if the user\'s groups intersect allowedGroups.\n        # Use object.get so omitted parameters can\'t cause policy bypass by\n        # evaluating to undefined.\n        userGroups := object.get(userInfo, "groups", [])\n        groups := {g | g := userGroups[_]}\n        allowed := {g | g := allowedGroups[_]}\n        intersection := groups & allowed\n        count(intersection) > 0\n      }\n\n      get_service_account(obj) = spec {\n        obj.kind == "Pod"\n        spec := obj.spec.serviceAccountName\n      } {\n        obj.kind == "ReplicationController"\n        spec := obj.spec.template.spec.serviceAccountName\n      } {\n        obj.kind == "ReplicaSet"\n        spec := obj.spec.template.spec.serviceAccountName\n      } {\n        obj.kind == "Deployment"\n        spec := obj.spec.template.spec.serviceAccountName\n      } {\n        obj.kind == "StatefulSet"\n        spec := obj.spec.template.spec.serviceAccountName\n      } {\n        obj.kind == "DaemonSet"\n        spec := obj.spec.template.spec.serviceAccountName\n      } {\n        obj.kind == "Job"\n        spec := obj.spec.template.spec.serviceAccountName\n      } {\n        obj.kind == "CronJob"\n        spec := obj.spec.jobTemplate.spec.template.spec.serviceAccountName\n      }\n\n      violation[{"msg": msg}] {\n        # This policy only applies to updates of existing resources.\n        input.review.operation == "UPDATE"\n\n        # Use object.get so omitted parameters can\'t cause policy bypass by\n        # evaluating to undefined.\n        params := object.get(input, "parameters", {})\n        allowedUsers := object.get(params, "allowedUsers", [])\n        allowedGroups := object.get(params, "allowedGroups", [])\n\n        # Extract the service account.\n        oldKSA := get_service_account(input.review.oldObject)\n        newKSA := get_service_account(input.review.object)\n\n        # Deny unprivileged users and groups from changing serviceAccountName.\n        not privileged(input.review.userInfo, allowedUsers, allowedGroups)\n        oldKSA != newKSA\n        msg := "user does not have permission to modify serviceAccountName"\n      } {\n        # Defensively require object to have a serviceAccountName.\n        input.review.operation == "UPDATE"\n        not get_service_account(input.review.object)\n        msg := "missing serviceAccountName field in object under review"\n      } {\n        # Defensively require oldObject to have a serviceAccountName.\n        input.review.operation == "UPDATE"\n        not get_service_account(input.review.oldObject)\n        msg := "missing serviceAccountName field in oldObject under review"\n      }\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/noupdateserviceaccount/template.yaml\n"})}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"noupdateserviceaccount"}),(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"constraint"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# IMPORTANT: Before deploying this policy, make sure you allow-list any groups\n# or users that need to deploy workloads to kube-system, such as cluster-\n# lifecycle controllers, addon managers, etc. Such controllers may need to\n# update service account names during automated rollouts (e.g. of refactored\n# configurations). You can allow-list them with the allowedGroups and\n# allowedUsers properties of the NoUpdateServiceAccount Constraint.\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: NoUpdateServiceAccount\nmetadata:\n  name: no-update-kube-system-service-account\nspec:\n  match:\n    namespaces: ["kube-system"]\n    kinds:\n    - apiGroups: [""]\n      kinds:\n      # You can optionally add "Pod" here, but it is unnecessary because\n      # Pod service account immutability is enforced by the Kubernetes API.\n      - "ReplicationController"\n    - apiGroups: ["apps"]\n      kinds:\n      - "ReplicaSet"\n      - "Deployment"\n      - "StatefulSet"\n      - "DaemonSet"\n    - apiGroups: ["batch"]\n      kinds:\n      # You can optionally add "Job" here, but it is unnecessary because\n      # Job service account immutability is enforced by the Kubernetes API.\n      - "CronJob"\n  parameters:\n    allowedGroups: []\n    allowedUsers: []\n\n'})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/noupdateserviceaccount/samples/noupdateserviceaccount/constraint.yaml\n"})})]}),(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"example-allowed"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# Note: The gator tests currently require exactly one object per example file.\n# Since this is an update-triggered policy, at least two objects are technically\n# required to demonstrate it. Due to the gator requirement, we only have one\n# object below. The policy should allow changing everything but the\n# serviceAccountName field.\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: policy-test\n  namespace: kube-system\n  labels:\n    app: policy-test\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: policy-test-deploy\n  template:\n    metadata:\n      labels:\n        app: policy-test-deploy\n    spec:\n      # Changing anything except this field should be allowed by the policy.\n      serviceAccountName: policy-test-sa-1\n      containers:\n      - name: policy-test\n        image: ubuntu\n        command:\n        - /bin/bash\n        - -c\n        - sleep 99999\n\n"})}),(0,a.jsx)(n.p,{children:"Usage"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/noupdateserviceaccount/samples/noupdateserviceaccount/example_allowed.yaml\n"})})]})]})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>c});var a=t(7294);const o={},s=a.createContext(o);function c(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);