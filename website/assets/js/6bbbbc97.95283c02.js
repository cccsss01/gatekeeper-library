"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1263],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>v});var l=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=l.createContext({}),p=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},c=l.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(n),c=r,v=u["".concat(s,".").concat(c)]||u[c]||d[c]||a;return n?l.createElement(v,o(o({ref:t},m),{},{components:n})):l.createElement(v,o({ref:t},m))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<a;p++)o[p]=n[p];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5071:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var l=n(7462),r=(n(7294),n(3905));const a={id:"flexvolume-drivers",title:"FlexVolumes"},o="FlexVolumes",i={unversionedId:"validation/flexvolume-drivers",id:"validation/flexvolume-drivers",title:"FlexVolumes",description:"Description",source:"@site/docs/validation/flexvolume-drivers.md",sourceDirName:"validation",slug:"/validation/flexvolume-drivers",permalink:"/gatekeeper-library/website/validation/flexvolume-drivers",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/validation/flexvolume-drivers.md",tags:[],version:"current",frontMatter:{id:"flexvolume-drivers",title:"FlexVolumes"},sidebar:"docs",previous:{title:"Capabilities",permalink:"/gatekeeper-library/website/validation/capabilities"},next:{title:"Forbidden Sysctls",permalink:"/gatekeeper-library/website/validation/forbidden-sysctls"}},s={},p=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}],m={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,l.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"flexvolumes"},"FlexVolumes"),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"Controls the allowlist of FlexVolume drivers. Corresponds to the ",(0,r.kt)("inlineCode",{parentName:"p"},"allowedFlexVolumes")," field in PodSecurityPolicy. For more information, see ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#flexvolume-drivers"},"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#flexvolume-drivers")),(0,r.kt)("h2",{id:"template"},"Template"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspflexvolumes\n  annotations:\n    metadata.gatekeeper.sh/title: "FlexVolumes"\n    metadata.gatekeeper.sh/version: 1.0.1\n    description: >-\n      Controls the allowlist of FlexVolume drivers. Corresponds to the\n      `allowedFlexVolumes` field in PodSecurityPolicy. For more information,\n      see\n      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#flexvolume-drivers\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPFlexVolumes\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Controls the allowlist of FlexVolume drivers. Corresponds to the\n            `allowedFlexVolumes` field in PodSecurityPolicy. For more information,\n            see\n            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#flexvolume-drivers\n          properties:\n            allowedFlexVolumes:\n              type: array\n              description: "An array of AllowedFlexVolume objects."\n              items:\n                type: object\n                properties:\n                  driver:\n                    description: "The name of the FlexVolume driver."\n                    type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8spspflexvolumes\n\n        import data.lib.exclude_update.is_update\n\n        violation[{"msg": msg, "details": {}}] {\n            # spec.volumes field is immutable.\n            not is_update(input.review)\n\n            volume := input_flexvolumes[_]\n            not input_flexvolumes_allowed(volume)\n            msg := sprintf("FlexVolume %v is not allowed, pod: %v. Allowed drivers: %v", [volume, input.review.object.metadata.name, input.parameters.allowedFlexVolumes])\n        }\n\n        input_flexvolumes_allowed(volume) {\n            input.parameters.allowedFlexVolumes[_].driver == volume.flexVolume.driver\n        }\n\n        input_flexvolumes[v] {\n            v := input.review.object.spec.volumes[_]\n            has_field(v, "flexVolume")\n        }\n\n        # has_field returns whether an object has a field\n        has_field(object, field) = true {\n            object[field]\n        }\n      libs:\n        - |\n          package lib.exclude_update\n\n          is_update(review) {\n              review.operation == "UPDATE"\n          }\n\n')),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/flexvolume-drivers/template.yaml\n")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"flexvolume-drivers"),(0,r.kt)("blockquote",null,(0,r.kt)("details",null,(0,r.kt)("summary",null,"constraint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPFlexVolumes\nmetadata:\n  name: psp-flexvolume-drivers\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n  parameters:\n    allowedFlexVolumes: #[]\n    - driver: "example/lvm"\n    - driver: "example/cifs"\n\n')),(0,r.kt)("p",null,"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/flexvolume-drivers/samples/psp-flexvolume-drivers/constraint.yaml\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"example-allowed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-flexvolume-driver-allowed\n  labels:\n    app: nginx-flexvolume-driver\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    volumeMounts:\n    - mountPath: /test\n      name: test-volume\n      readOnly: true\n  volumes:\n  - name: test-volume\n    flexVolume:\n      driver: "example/lvm"\n\n')),(0,r.kt)("p",null,"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/flexvolume-drivers/samples/psp-flexvolume-drivers/example_allowed.yaml\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"example-disallowed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-flexvolume-driver-disallowed\n  labels:\n    app: nginx-flexvolume-driver\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    volumeMounts:\n    - mountPath: /test\n      name: test-volume\n      readOnly: true\n  volumes:\n  - name: test-volume\n    flexVolume:\n      driver: "example/testdriver" #"example/lvm"\n\n')),(0,r.kt)("p",null,"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/flexvolume-drivers/samples/psp-flexvolume-drivers/example_disallowed.yaml\n"))))))}d.isMDXComponent=!0}}]);